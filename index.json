[{"content":"Credentials ðŸ”— Full-Stack-Application ðŸ”— Continuous Delivery GithubAction Introduction I am a test engineer by profession but I like to tinker things, this let me to explore the world of web dev with Java since I was working with Java anyways in testing. Thus I learned about Spring Boot the easiest way to bootstrap your backend development java.\nWhy not use thymeleaf? With the rise of SPA like React, companies have constantly been shifting from templating engines to separate their backend and frontend code and communicating via REST APIs, and host them seperate cloud servers, which offers far more elasticity in terms of scaling and resiliency.\nThe AWS Solutions Architect - Associate certification validates your ability to design and deploy well-architected solutions on AWS, which is the leading cloud provider today. In simple terms, this exam tests your ability to propose an architecture given a specific scenario. For example: a company wants their application to continue running even if an entire AWS region, where that application was hosted, is down due to a disaster. So, how would you design their infrastructure around this use case?\nThings used in Application List of library used\nSpring Boot Spring Security React MUI JIB Maven Plugin Github Actions Github Actions You can use Github Actions to:\nTest Build Deploy your application\nGithub Actions for public projects are free to use as of now.\nDeployment For deployment you have plethora of options, but AWS seems most viable and in most demand. Even in AWS there are many services and to choose one from those services can be hard.\nWe can take the route of deploying on simple EC2 (Elastic Compute) instance by configuring the EC2 instance to our needs that is by installing applications like Java and Node (and more dependencies) and then deploying it.\nOr we can take the route of deploying our SpringBoot Application on Elastic Container Service (ECS) and manage it there. But this will again require us to tinker with the number of instance and scaling configurations.\nThe most easy way is to deploy it on Elastic Beanstalk, which is a service which takes care of scaling and does not care if you are deploying Dokcer Container or a executable JAR.\nThe process to that is mentioned below:\nTo be done 1 To be done 2 That\u0026rsquo;s all, untill next time That was all about the E2E Application Development experience, see you next time in some other blog.\n","permalink":"https://heyrmi.github.io/blog/e2e-application-development/","summary":"Credentials ðŸ”— Full-Stack-Application ðŸ”— Continuous Delivery GithubAction Introduction I am a test engineer by profession but I like to tinker things, this let me to explore the world of web dev with Java since I was working with Java anyways in testing. Thus I learned about Spring Boot the easiest way to bootstrap your backend development java.\nWhy not use thymeleaf? With the rise of SPA like React, companies have constantly been shifting from templating engines to separate their backend and frontend code and communicating via REST APIs, and host them seperate cloud servers, which offers far more elasticity in terms of scaling and resiliency.","title":"How to develop E2E Applications"},{"content":"Introduction ","permalink":"https://heyrmi.github.io/work/relevance-of-java/","summary":"Introduction ","title":"Why Java is still relevant"},{"content":"Description Contributed in a Selenium Testing Framework of which the main libraries used were Selenium, TestNG, ExtentReports and GithubAction, this included support of multiple data inputs (JSON, xls, properties).\nUsed Github Actions to publish framework as private maven atrifact in github private artifactory. Used Github Actions to consume the framework inside test repositories. Used dependabot to update all the repositories when a new framework released Used Github Actions to run the framework on push, pullrequest, and manual trigger Through this, I learned to build framework that can handle multiple UI tests in parallel, wrote test for Admin Application as well as Marketing Website. Did a POC on sending test execution logs to Report Portal by deploying its docker container on EC2 instance (Ubuntu). Worked on API Testing using Rest-Assured initially, then eventually moved to Postman. Did testing of features from Risk side before their release on production. ","permalink":"https://heyrmi.github.io/experience/dripcapital/","summary":"Description Contributed in a Selenium Testing Framework of which the main libraries used were Selenium, TestNG, ExtentReports and GithubAction, this included support of multiple data inputs (JSON, xls, properties).\nUsed Github Actions to publish framework as private maven atrifact in github private artifactory. Used Github Actions to consume the framework inside test repositories. Used dependabot to update all the repositories when a new framework released Used Github Actions to run the framework on push, pullrequest, and manual trigger Through this, I learned to build framework that can handle multiple UI tests in parallel, wrote test for Admin Application as well as Marketing Website.","title":"SDET-I"},{"content":"ðŸ”— GitHub Description Corporate Internet Banking: Worked on Automation Testing of Corporate Internet Banking website.\nSelenium Web Automation Framework: Worked on development of Selenium Web Automation Framework for the Automation Testing of Corporate Internet Banking and other applications.\nTestNG : Used TestNG as unit testing tool to manage the tests and used TestNG listeners Extent Reports: Used Extent Reports to generate HTML reports after every execution. Maven: Used Maven for dependency management and for remote execution of test suites using Surefire plugin. Apache POI: Used Apache POI to read data from Excel Files as the framework was Data Driven. Docker: Used Docker to make image of the testing software and keeping on docker private registry. ElasticSearch and Kibana: A POC on live reporting using ElasticSearch and Kibana. ","permalink":"https://heyrmi.github.io/experience/aubank/","summary":"ðŸ”— GitHub Description Corporate Internet Banking: Worked on Automation Testing of Corporate Internet Banking website.\nSelenium Web Automation Framework: Worked on development of Selenium Web Automation Framework for the Automation Testing of Corporate Internet Banking and other applications.\nTestNG : Used TestNG as unit testing tool to manage the tests and used TestNG listeners Extent Reports: Used Extent Reports to generate HTML reports after every execution. Maven: Used Maven for dependency management and for remote execution of test suites using Surefire plugin.","title":"QA Automation Engineer"}]